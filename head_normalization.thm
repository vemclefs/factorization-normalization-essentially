Kind  nat  type.
Kind  tm   type.

Import "beta".

/***********************************************************/
/*                     Head reduction                      */
/***********************************************************/

Define head : tm -> tm -> prop by
  head (app (abs T) U) (T U);
  head (app (app T1 T2) U) (app T' U) := head (app T1 T2) T';
  head (abs T) (abs T') := nabla x, head (T x) (T' x).

Define head* : tm -> tm -> prop by
  head* T T;
  head* T U := exists S, head T S /\ head* S U.

Theorem head*_trans : forall T S U, head* T S -> head* S U -> head* T U.
induction on 1. intros. case H1.
  search.
  apply IH to H4 H2. search.

% Head normal forms and strongly head-normalizing terms

Define head_nf : tm -> prop by
  head_nf T := forall T', head T T' -> false.

Define head_sn : tm -> prop by
  head_sn T := forall T', head T T' -> head_sn T'.

/***********************************************************/
/*                   Non-head reduction                    */
/***********************************************************/

Define nhead : tm -> tm -> prop by
  nhead (app (abs T) U) (app (abs T') U) := nabla x, beta (T x) (T' x);
  nhead (app T U) (app T U') := beta U U';
  nhead (abs T) (abs T') := nabla x, nhead (T x) (T' x);
  nhead (app T U) (app T' U) := nhead T T'.

Define nhead* : tm -> tm -> prop by
  nhead* T T;
  nhead* T U := exists S, nhead T S /\ nhead* S U.

Theorem nhead*_trans : forall T S U, nhead* T S -> nhead* S U -> nhead* T U.
induction on 1. intros. case H1.
  search.
  apply IH to H4 H2. search.

Theorem nhead*_abs : forall T T', nabla x,
  nhead* (T x) (T' x) -> nhead* (abs T) (abs T').
induction on 1. intros. case H1.
  search.
  apply IH to H3. search.

Theorem nhead*_app : forall T T' U U',
  nhead* T T' -> beta* U U' -> nhead* (app T U) (app T' U').
induction on 1. induction on 2. intros. case H1 (keep).
  case H2.
    search.
    apply IH1 to H1 H4. search.
  apply IH to H4 H2. search.

Theorem nhead*_redex : forall T T' U U', nabla x,
  beta* (T x) (T' x) -> beta* U U' -> nhead* (app (abs T) U) (app (abs T') U').
induction on 1. induction on 2. intros. case H1 (keep).
  case H2.
    search.
    apply IH1 to H1 H4. search.
  apply IH to H4 H2. search.

/***********************************************************/
/*               Parallel non-head reduction               */
/***********************************************************/

Define pnhead : tm -> tm -> prop by
  nabla x, pnhead x x;
  pnhead (app (abs T) U) (app (abs T') U') :=
    nabla x, pbeta (T x) (T' x) /\ pbeta U U';
  pnhead (abs T) (abs T') := nabla x, pnhead (T x) (T' x);
  pnhead (app T U) (app T' U') := pnhead T T' /\ pbeta U U'.

Theorem pnhead_refl : forall T, tm T -> pnhead T T.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.
  apply IH to H2. apply pbeta_refl to H3. search.

Theorem pnhead_pbeta : forall T T', pnhead T T' -> pbeta T T'.
induction on 1. intros. case H1.
  search.
  search.
  apply IH to H2. search.
  apply IH to H2. search.

/***********************************************************/
/*                 Head macro-step system                  */
/***********************************************************/

Theorem head_beta : forall T T', head T T' -> beta T T'.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.
  apply IH to H2. search.

Theorem beta_head_nhead : forall T T', beta T T' -> head T T' \/ nhead T T'.
induction on 1. intros. case H1.
  search.
  apply IH to H2. case H3.
    case H4.
      search.
      search.
      apply head_beta to H5. search.
    search.
  apply IH to H2. case H3.
    search.
    search.
  search.

Theorem nhead_pnhead : forall T T', tm T -> nhead T T' -> pnhead T T'.
induction on 2. intros. case H2.
  case H1. case H4. apply beta_pbeta to H6 H3. apply pbeta_refl to H5. search.
  case H1. apply pnhead_refl to H4. apply beta_pbeta to H5 H3. search.
  case H1. apply IH to H4 H3. search.
  case H1. apply IH to H4 H3. apply pbeta_refl to H5. search.

Theorem pnhead_nhead* : forall T T', pnhead T T' -> nhead* T T'.
induction on 1. intros. case H1.
  search.
  apply pbeta_beta* to H2. apply pbeta_beta* to H3. backchain nhead*_redex.
  apply IH to H2. backchain nhead*_abs.
  apply IH to H2. apply pbeta_beta* to H3. backchain nhead*_app.

Theorem merge : forall T S U, pnhead T S -> head S U -> pbeta T U.
induction on 1. intros. case H1.
  case H2.
  case H2. search.
  case H2. apply IH to H3 H4. search.
  case H2.
    case H3. apply pnhead_pbeta to H5. search.
    apply IH to H3 H5. search.

Theorem indexed_split : forall T U N,
  ipbeta T U N -> pnhead T U \/
                  exists N' S, N = s N' /\ head T S /\ ipbeta S U N'.
induction on 1. intros. case H1.
  search.
  apply IH to H2. case H3.
    search.
    search.
  apply ipbeta_pbeta to H3. case H2 (keep).
    search.
    apply ipbeta_pbeta to H6. search.
    apply IH to H2. case H9.
      search.
      case H4. search.
    apply IH to H2. case H11.
      search.
      case H4. search.
  apply ipbeta_substitutivity to H2 H3 H4 H5 H6. search.

Theorem split_ : forall T U, pbeta T U -> exists S, head* T S /\ pnhead S U.
assert forall T U N, nat N -> ipbeta T U N -> exists S, head* T S /\ pnhead S U.
  induction on 1. intros. apply indexed_split to H2. case H3.
    search.
    case H1. apply IH to H6 H5. search.
intros. apply pbeta_ipbeta to H2. backchain H1.

/***********************************************************/
/*                   Head factorization                    */
/***********************************************************/

Theorem postpone_pnhead_head* : forall T S U,
  pnhead T S -> head* S U -> exists S', head* T S' /\ pnhead S' U.
induction on 2. intros. case H2.
  search.
  apply merge to H1 H3. apply split_ to H5. apply IH to H7 H4.
                        apply head*_trans to H6 H8. search.

Theorem factorization : forall T U,
  tm T -> beta* T U -> exists S, head* T S /\ nhead* S U.
induction on 2. intros. case H2.
  search.
  apply beta_tm to _ H3. apply IH to _ H4. apply beta_head_nhead to H3. case H8.
    % Head
    search.
    % Non-head
    apply nhead_pnhead to _ H9.
    apply postpone_pnhead_head* to H10 H6.
    apply pnhead_nhead* to H12.
    apply nhead*_trans to H13 H7.
    search.

/***********************************************************/
/*                  Head essential system                  */
/***********************************************************/

Theorem persistence : forall T S U,
  head T S -> nhead T U -> exists R, head U R.
induction on 1. intros. case H1.
  case H2.
    search.
    search.
    case H3. search.
  case H2.
    search.
    apply IH to H3 H4. case H5.
      search.
      search.
      search.
  case H2. apply IH to H3 H4. search.

Theorem determinism : forall T U1 U2, head T U1 -> head T U2 -> U1 = U2.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to H3 H4. search.
  case H2. apply IH to H3 H4. search.

Theorem uniform_termination : forall T T',
  head* T T' -> head_nf T' -> head_sn T.
induction on 1. intros. unfold. intros. case H1.
  case H2. apply H4 to H3.
  apply determinism to H3 H4. backchain IH.

Theorem terminal_factorization : forall T U,
  tm T -> beta* T U -> head_nf U -> exists S, head* T S /\ nhead* S U.
intros. backchain factorization.

/***********************************************************/
/*                   Head normalization                    */
/***********************************************************/

Theorem persistence* : forall T S U,
  head T S -> nhead* T U -> exists R, head U R.
induction on 2. intros. case H2.
  search.
  apply persistence to H1 H3. apply IH to H5 H4. search.

Theorem normalization : forall T U,
  tm T -> beta* T U -> head_nf U -> head_sn T.
intros.
apply terminal_factorization to H1 H2 H3.
assert head_nf S.
  unfold. intros. apply persistence* to H6 H5. case H3. backchain H8.
backchain uniform_termination.
